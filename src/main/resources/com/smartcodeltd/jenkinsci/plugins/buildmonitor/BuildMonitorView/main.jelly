<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
         xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
         xmlns:i="jelly:fmt">

    <l:layout norefresh="true">

        <j:set var="resourcesURL" value="${resURL}/plugin/build-monitor-plugin" />
        <j:set var="jobsURL" value="${rootURL}/job" />
        <j:set var="angularVersion" value="1.1.5" />

        <l:header>
            <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans:400,700"/>
            <link rel="stylesheet" href="${resourcesURL}/styles/normalize.css"/>
            <link rel="stylesheet" href="${resourcesURL}/styles/bootstrap-combined.2.3.2.min.css"/>
            <link rel="stylesheet" href="${resourcesURL}/styles/angular-slider.css"/>

            <link rel="stylesheet" href="${resourcesURL}/themes/industrial.css"/>

            <script src="//ajax.googleapis.com/ajax/libs/angularjs/${angularVersion}/angular.min.js"></script>
            <script src="//ajax.googleapis.com/ajax/libs/angularjs/${angularVersion}/angular-cookies.min.js"></script>
            <script>window.angular || document.write('\x3Cscript src="${resourcesURL}/libs/angular-${angularVersion}.min.js">\x3C/script>')</script>
<!-- todo: using window.angular is incorrect here; should check whether ngCookies is available instead! -->
            <script>window.angular || document.write('\x3Cscript src="${resourcesURL}/libs/angular-cookies-${angularVersion}.min.js">\x3C/script>')</script>
            <script src="${resourcesURL}/libs/ui-bootstrap-custom-tpls-0.4.0.js"></script>
            <script src="${resourcesURL}/libs/angular-slider.js"></script>
        </l:header>

        <l:main-panel>
            <div class="build-monitor dashboard" data-ng-app="buildMonitor" data-ng-controller="JobViews">
                <header>
                    <h1><a href="configure" title="Configure the '${it.displayName}' view">${it.displayName}</a></h1>
                </header>

                <st:include page="main-config.jelly"/>

                <j:choose>
                    <j:when test="${it.isEmpty()}">
                        <st:include page="main-empty.jelly"/>
                    </j:when>
                    <j:otherwise>
                        <st:include page="main-jobViews.jelly"/>
                    </j:otherwise>
                </j:choose>

                <footer>
                    Brought to you by <a href="http://smartcodeltd.co.uk" rel="external">Jan Molak</a>
                </footer>
            </div>

            <script src="${resourcesURL}/scripts/app.js"></script>
            <script src="${resourcesURL}/scripts/services.js"></script>
            <script src="${resourcesURL}/scripts/jenkins.js"></script>
            <script src="${resourcesURL}/scripts/controllers.js"></script>
            <script>
            'use strict';

            // self-executing function here ensures that I'm only overriding makeStaplerProxy within its scope
            (function() {
                // todo: replace with a custom Jelly tag extending org.kohsuke.stapler.jelly.BindTag,
                //  that would generate JSON describing the binding (such as below), to avoid having to use
                //  the current implementation of BindTag, which couples me tightly to either prototype or jQuery.
                var makeStaplerProxy = function(url, crumb, methods) {
                        return { url: url, crumb: crumb, methods: methods }
                    },
                    bindings = { 'buildMonitor': <st:bind value="${it}"/> };

                angular.module('buildMonitor').config(function(proxyProvider) {
                    proxyProvider.configureProxiesUsing(bindings);
                });

                angular.module('buildMonitor.services').value('buildMonitorName', '${it.displayName}');
            })();
            </script>
        </l:main-panel>
    </l:layout>
</j:jelly>